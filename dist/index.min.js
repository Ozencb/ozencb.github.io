(function (factory) {
    typeof define === 'function' && define.amd ? define(factory) :
    factory();
}(function () { 'use strict';

    const curvedShapes = (p) => {
        console.log("Blobsicles by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/random_shapes");

        let scale;

        let size;
        const dim = 4;

        const colors = [p.color(255, 135, 95), p.color(255, 135, 95), p.color(255, 225, 95), p.color(75, 215, 225)];

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.background(0);
            p.strokeWeight(3);
            p.blendMode(p.DARKEST);
            p.frameRate(0.6);
            p.smooth();
        };

        p.draw = () => {
            p.clear();
            display();
        };

        const display = () => {
            size = p.windowWidth < p.windowHeight ? p.windowWidth / 10 : p.windowHeight / 10;
            for (let i = 0; i < dim; i++) {
                for (let j = 0; j < dim; j++) {
                    p.fill(colors[p.floor(p.random(colors.length))]);
                    let pos = p.createVector(p.width / dim * (i + 0.5), p.height / dim * (j + 0.5));
                    draw_shape(pos);
                }
            }
        };

        const draw_shape = (pos) => {
            let n = p.int(p.random(3, 6));
            let angle = p.PI * p.random(2);

            p.push();
           
            p.translate(pos.x, pos.y);
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);
            
            p.rotate(angle);

            p.push();
            draw_arcs(generate_string(n), create_initial_array(n));
            p.pop();

            p.rotate(p.PI);
            draw_arcs(generate_string(n), create_initial_array(n));
            p.pop();
        };

        const create_initial_array = (n) => {
            p.translate(-size / 2, 0);

            let arr = [];

            for (let i = 0; i <= n; i++) {
                let leaf = {
                    pos: i * (size / n)
                };
                arr.push(leaf);
            }
            return arr;
        };

        const generate_string = (n) => {
            let arr = [];
            for (let i = 1; i <= n; i++) {
                arr.push(i);
            }
            return p.shuffle(arr);
        };

        const draw_arcs = (rstring, poslist) => {
            let totalHeight = 0;
            for (let i = 0; i < rstring.length; i++) {
                let area = rstring[i];
                let start = get_top(poslist[area - 1]);
                let end = get_top(poslist[area]);

                let center = (start.pos + end.pos) / 2;
                let diameter = end.pos - start.pos;
                let radius = diameter / 2;

                for (let j = 0; j < poslist.length; j++) {
                    let top = get_top(poslist[j]);
                    if (top != start && top != end) {
                        p.line(top.pos, 0, top.pos, -radius);
                    }
                }

                p.arc(center, 0, diameter, diameter, p.PI, p.TWO_PI);
                p.noStroke();
                p.rect(start.pos, -1, diameter, totalHeight + 2);
                p.stroke(35);
                p.translate(0, -radius);

                let new_point = {
                    pos: center,
                    parent: null
                };

                start.parent = new_point;
                end.parent = new_point;

                totalHeight += radius;
            }
        };

        const get_top = (point) => {
            if (point.parent != null) {
                return get_top(point.parent);
            }
            return point;
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const crossGrid = (p) => {
        console.log("Cross Grid by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/lab/cross-grid");

        let tick;

        let cross_dim = 10;
        let grid_size = 25;
        let cell_dim = 25;
        let nheight = 1.5;
        let nzoom = 25;
        let scale;

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.stroke(255);

            tick = 0;
        };

        p.draw = () => {
            p.background(0);
            p.translate(p.width / 2, p.height / 2);

            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);

            draw_grid();

            tick += 0.005;
        };

        const draw_grid = () => {
            for (let j = 0; j < grid_size; j++) {
                for (let i = 0; i < grid_size; i++) {
                    p.push();
                    p.scale(p.map(p.noise(i / nzoom + tick, j / nzoom), 0, 1, 1 / nheight, nheight));
                    draw_cross((i - grid_size / 2) * cell_dim, (j - grid_size / 2) * cell_dim);
                    p.pop();
                }
            }
        };

        const draw_cross = (x, y) => {
            p.push();
            p.translate(x, y);
            p.line(-cross_dim / 2, 0, cross_dim / 2, 0);
            p.line(0, -cross_dim / 2, 0, cross_dim / 2);
            p.pop();
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const shapes = (p) => {
        console.log("Geometries from P5js.");
        console.log("Link to project: https://p5js.org/examples/3d-geometries.html");

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');
        };

        p.draw = () => {
            p.background(0);
            p.normalMaterial();

            p.scale((p.windowWidth + p.windowHeight) / 2500);

            p.translate(-240, -100, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.plane(70);
            p.pop();

            p.translate(240, 0, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.box(70, 70, 70);
            p.pop();

            p.translate(240, 0, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.cylinder(70, 70);
            p.pop();

            p.translate(-240 * 2, 200, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.cone(70, 70);
            p.pop();

            p.translate(240, 0, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.torus(70, 20);
            p.pop();

            p.translate(240, 0, 0);
            p.push();
            p.rotateZ(p.frameCount * 0.01);
            p.rotateX(p.frameCount * 0.01);
            p.rotateY(p.frameCount * 0.01);
            p.sphere(70);
            p.pop();
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const lorenz = (p) => {
        console.log("Link to project: https://editor.p5js.org/Bixbite/sketches/S10aGSejQ");
        
        const SIGMA = 10;
        const RHO = 28;
        const BETA = 8 / 3;
        const DT = 1 / 60;
        const MAX_LEN = 100;

        let offset = 0;

        let point;
        let path = [];

        let scale;

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.colorMode(p.HSB, 100);

            point = p.createVector(1, 1, 1);
        };

        p.draw = () => {
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 100 : p.windowHeight / 100;
            p.scale(scale);

            p.background(0);

            p.rotateZ(p.frameCount * 0.002);

            let delta = p.createVector(
                SIGMA * (point.y - point.x),
                point.x * (RHO - point.z) - point.y,
                point.x * point.y - BETA * point.z
            );

            delta.mult(DT);

            point.add(delta);
            path.push(point.copy());

            if (path.length > MAX_LEN) {
                path.splice(0, 1);
                ++offset;
            }

            p.strokeWeight(5);
            p.stroke(255);
            p.noFill();

            let prev = path[0];

            for (let i = 1; i < path.length; ++i) {
                let next = path[i];

                p.stroke(((i + offset) * 0.1) % 100, 100, 100 - (path.length - i) * (100 / MAX_LEN));
                p.line(prev.x, prev.y, prev.z, next.x, next.y, next.z);
                prev = next;
            }
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const globe = (p) => {
        console.log("Orbit Control from P5js.");
        console.log("Link to project: https://p5js.org/examples/3d-orbit-control.html");

        let scale;
        
        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');
        };

        p.draw = () => {
            let radius = 500;
            let size = 25;

            p.background(0);
            p.normalMaterial();

            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);

            p.rotateZ(p.frameCount * 0.002);
            p.rotateX(p.frameCount * 0.002);

            for (let i = 0; i <= 12; i++) {
                for (let j = 0; j <= 12; j++) {
                    let a = (j / 12) * p.PI;
                    let b = (i / 12) * p.PI;

                    p.push();

                    p.translate(
                        p.sin(2 * a) * radius * p.sin(b),
                        (p.cos(b) * radius),
                        p.cos(2 * a) * radius * p.sin(b)
                    );

                    if (j % 2 === 0) {
                        p.cone(size, size);
                    } else {
                        p.box(size, size, size);
                    }
                    p.pop();
                }
            }
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const getRandomPalette = (colorAmount = 1) => {
        let letters = '0123456789ABCDEF';
        let color = '#';
        let palette = [];
        for (let i = 0; i < colorAmount; i++) {
            for (let j = 0; j < 6; j++) {
                color += letters[Math.floor(Math.random() * 16)];
            }

            if (colorAmount > 1){
                palette.push(color);
                color = '#';
            } else {
                return color;
            }
        }
        return palette;
    };

    const smokeRings = (p) => {
        console.log("Smoke Rings by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/smokerings");

        let ox = p.random(10000);
        let oy = p.random(10000);
        let oz = p.random(10000);

        let rings = 25;

        let scale;

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.stroke(getRandomPalette());
            p.strokeWeight(2);
            p.smooth();
            p.noFill();
        };

        p.draw = () => {
            p.clear();
            p.translate(p.width / 2, p.height / 2);
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);


            display();
        };

        const display = () => {
            ox += 0.01;
            oy += 0.01;
            oz += 0.007;

            for (let i = 0; i < rings; i++) {
                p.beginShape();
                for (let angle = 0; angle < 360; angle += 3) {
                    let radian = p.radians(angle);
                    let radius = 250 + p.map(getNoise(radian, 0.35, 0.02 * i), 0, 1, -150, 150);
                    p.vertex(radius * p.cos(radian), radius * p.sin(radian));
                }
                p.endShape(p.CLOSE);
            }
        };

        const getNoise = (radian, dim, time) => {
            let r = radian % p.TWO_PI;

            if (r < 0.0) {
                r += p.TWO_PI;
            }
            return p.noise(ox + p.cos(r) * dim, oy + p.sin(r) * dim, oz + time);
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const stripesBW = (p) => {
        console.log("StripesBW by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/stripesbw");

        let rows = 30 * 2;
        let radius = 350;
        let min_length = 10;
        let max_length = 100;
        let space = 10;
        let stripes = [];
        let tick = 0;
        let scale;
        let randomColor = getRandomPalette();

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.stroke(0);
            p.noFill();

            for (let i = 0; i < rows; i++) {
                let ypos = ((i + .5) / rows) * (radius * 2) - radius;
                let row_length = 2 * p.sqrt((radius * radius) - (ypos * ypos));

                add_stripe_row(ypos, row_length);
            }
        };

        p.draw = () => {
            p.clear();
            p.translate(p.width / 2, p.height / 2);
            p.rotate(-p.PI / 5);
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);

            for (let s in stripes) {
                let stripe = stripes[s];

                p.strokeWeight(12);
                p.stroke(randomColor);

                p.strokeWeight(p.max(0, p.noise(5000 + stripe.start / 100, 5000 - tick / 160 + stripe.y / 100, tick / 200) * 20 - 6));
                p.line(stripe.start, stripe.y, stripe.end, stripe.y);
            }
            tick++;
        };

        const add_stripe_row = (ypos, row_length) => {
            let length = p.random(min_length, max_length);
            let start = -.5 * row_length;
            let end = start + length;

            while (end < row_length / 2 - space - min_length) {
                stripes.push({
                    y: ypos,
                    start: start,
                    end: end
                });

                length = p.random(min_length, max_length);
                start = end + space;
                end = start + length;
            }

            stripes.push({
                y: ypos,
                start: start,
                end: row_length / 2
            });
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    const stripes = (p) => {
        console.log("Stripes by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/stripes");

        let rows = 20;
        let radius = 250;
        let scale;
        let min_length = 35;
        let max_length = 85;
        let space = 15;
        let stripes = [];
        
        const colors = [
            p.color(142, 192, 124),
            p.color(250, 189, 47),
            p.color(251, 71, 44),
            p.color(211, 134, 147),
            p.color(49, 69, 80)
        ];

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);
            canvas.parent('stage');

            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.stroke(255);
            p.strokeWeight(10);



            for (let i = 0; i < rows; i++) {
                let ypos = ((i + .5) / rows) * (radius * 2) - radius;
                let row_length = get_row_length(ypos);

                add_stripe_row(ypos, row_length);
            }
        };

        p.draw = () => {
            p.clear();
            p.translate(p.width / 2, p.height / 2);
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 1000 : p.windowHeight / 1000;
            p.scale(scale);

            for (let row in stripes) {
                for (let s in stripes[row]) {
                    let stripe = stripes[row][s];
                    let length = get_row_length(stripe.y);

                    if (!is_outside_circle(stripe, length)) {
                        p.stroke(stripe.color);
                        p.line(p.max((stripe.start + space), -length), stripe.y, p.min((stripe.end - space), length), stripe.y);
                    } else if (stripe.start > length) {
                        stripes[row].splice(s, 1);

                        let s_length = p.random(min_length, max_length);
                        let end = stripes[row][0].start;
                        let start = end - s_length;

                        stripes[row].unshift({
                            y: stripe.y,
                            start: start,
                            end: end,
                            color: colors[p.floor(p.random(5))]
                        });
                    }

                    let startx = p.constrain(stripe.start, -length, length);
                    let endx = p.constrain(stripe.end, -length, length);
                    let startspeed = p.sqrt(2) - p.sqrt(stripe.y * stripe.y + startx * startx) / radius;
                    let endspeed = p.sqrt(2) - p.sqrt(stripe.y * stripe.y + endx * endx) / radius;

                    stripe.start += startspeed;
                    stripe.end += endspeed;
                }
            }
        };

        const get_row_length = (ypos) => {
            if ((radius * radius) < (ypos * ypos)) return 0;
            return p.sqrt((radius * radius) - (ypos * ypos));
        };

        const is_outside_circle = (stripe, length) => {
            return stripe.end - space < -length || stripe.start + space > length;
        };

        const add_stripe_row = (ypos, row_length) => {
            let row = [];
            let length = p.random(min_length, max_length);
            let start = -1000 + p.random(min_length, max_length);
            let end = start + length;

            while (end < -row_length) {
                row.push({
                    y: ypos,
                    start: start,
                    end: end,
                    color: colors[p.floor(p.random(5))]
                });

                length = p.random(min_length, max_length);
                start = end;
                end = start + length;
            }
            stripes.push(row);
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var simplexNoise = createCommonjsModule(function (module, exports) {
    /*
     * A fast javascript implementation of simplex noise by Jonas Wagner

    Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
    Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
    With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
    Better rank ordering method by Stefan Gustavson in 2012.


     Copyright (c) 2018 Jonas Wagner

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in all
     copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     SOFTWARE.
     */
    (function() {

      var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);
      var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;
      var F3 = 1.0 / 3.0;
      var G3 = 1.0 / 6.0;
      var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;
      var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;

      function SimplexNoise(randomOrSeed) {
        var random;
        if (typeof randomOrSeed == 'function') {
          random = randomOrSeed;
        }
        else if (randomOrSeed) {
          random = alea(randomOrSeed);
        } else {
          random = Math.random;
        }
        this.p = buildPermutationTable(random);
        this.perm = new Uint8Array(512);
        this.permMod12 = new Uint8Array(512);
        for (var i = 0; i < 512; i++) {
          this.perm[i] = this.p[i & 255];
          this.permMod12[i] = this.perm[i] % 12;
        }

      }
      SimplexNoise.prototype = {
        grad3: new Float32Array([1, 1, 0,
          -1, 1, 0,
          1, -1, 0,

          -1, -1, 0,
          1, 0, 1,
          -1, 0, 1,

          1, 0, -1,
          -1, 0, -1,
          0, 1, 1,

          0, -1, 1,
          0, 1, -1,
          0, -1, -1]),
        grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,
          0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,
          1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,
          -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,
          1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,
          -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,
          1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,
          -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),
        noise2D: function(xin, yin) {
          var permMod12 = this.permMod12;
          var perm = this.perm;
          var grad3 = this.grad3;
          var n0 = 0; // Noise contributions from the three corners
          var n1 = 0;
          var n2 = 0;
          // Skew the input space to determine which simplex cell we're in
          var s = (xin + yin) * F2; // Hairy factor for 2D
          var i = Math.floor(xin + s);
          var j = Math.floor(yin + s);
          var t = (i + j) * G2;
          var X0 = i - t; // Unskew the cell origin back to (x,y) space
          var Y0 = j - t;
          var x0 = xin - X0; // The x,y distances from the cell origin
          var y0 = yin - Y0;
          // For the 2D case, the simplex shape is an equilateral triangle.
          // Determine which simplex we are in.
          var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
          if (x0 > y0) {
            i1 = 1;
            j1 = 0;
          } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
          else {
            i1 = 0;
            j1 = 1;
          } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
          // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
          // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
          // c = (3-sqrt(3))/6
          var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
          var y1 = y0 - j1 + G2;
          var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
          var y2 = y0 - 1.0 + 2.0 * G2;
          // Work out the hashed gradient indices of the three simplex corners
          var ii = i & 255;
          var jj = j & 255;
          // Calculate the contribution from the three corners
          var t0 = 0.5 - x0 * x0 - y0 * y0;
          if (t0 >= 0) {
            var gi0 = permMod12[ii + perm[jj]] * 3;
            t0 *= t0;
            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient
          }
          var t1 = 0.5 - x1 * x1 - y1 * y1;
          if (t1 >= 0) {
            var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;
            t1 *= t1;
            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);
          }
          var t2 = 0.5 - x2 * x2 - y2 * y2;
          if (t2 >= 0) {
            var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;
            t2 *= t2;
            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);
          }
          // Add contributions from each corner to get the final noise value.
          // The result is scaled to return values in the interval [-1,1].
          return 70.0 * (n0 + n1 + n2);
        },
        // 3D simplex noise
        noise3D: function(xin, yin, zin) {
          var permMod12 = this.permMod12;
          var perm = this.perm;
          var grad3 = this.grad3;
          var n0, n1, n2, n3; // Noise contributions from the four corners
          // Skew the input space to determine which simplex cell we're in
          var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
          var i = Math.floor(xin + s);
          var j = Math.floor(yin + s);
          var k = Math.floor(zin + s);
          var t = (i + j + k) * G3;
          var X0 = i - t; // Unskew the cell origin back to (x,y,z) space
          var Y0 = j - t;
          var Z0 = k - t;
          var x0 = xin - X0; // The x,y,z distances from the cell origin
          var y0 = yin - Y0;
          var z0 = zin - Z0;
          // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
          // Determine which simplex we are in.
          var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
          var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
          if (x0 >= y0) {
            if (y0 >= z0) {
              i1 = 1;
              j1 = 0;
              k1 = 0;
              i2 = 1;
              j2 = 1;
              k2 = 0;
            } // X Y Z order
            else if (x0 >= z0) {
              i1 = 1;
              j1 = 0;
              k1 = 0;
              i2 = 1;
              j2 = 0;
              k2 = 1;
            } // X Z Y order
            else {
              i1 = 0;
              j1 = 0;
              k1 = 1;
              i2 = 1;
              j2 = 0;
              k2 = 1;
            } // Z X Y order
          }
          else { // x0<y0
            if (y0 < z0) {
              i1 = 0;
              j1 = 0;
              k1 = 1;
              i2 = 0;
              j2 = 1;
              k2 = 1;
            } // Z Y X order
            else if (x0 < z0) {
              i1 = 0;
              j1 = 1;
              k1 = 0;
              i2 = 0;
              j2 = 1;
              k2 = 1;
            } // Y Z X order
            else {
              i1 = 0;
              j1 = 1;
              k1 = 0;
              i2 = 1;
              j2 = 1;
              k2 = 0;
            } // Y X Z order
          }
          // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
          // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
          // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
          // c = 1/6.
          var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
          var y1 = y0 - j1 + G3;
          var z1 = z0 - k1 + G3;
          var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
          var y2 = y0 - j2 + 2.0 * G3;
          var z2 = z0 - k2 + 2.0 * G3;
          var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
          var y3 = y0 - 1.0 + 3.0 * G3;
          var z3 = z0 - 1.0 + 3.0 * G3;
          // Work out the hashed gradient indices of the four simplex corners
          var ii = i & 255;
          var jj = j & 255;
          var kk = k & 255;
          // Calculate the contribution from the four corners
          var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
          if (t0 < 0) n0 = 0.0;
          else {
            var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;
            t0 *= t0;
            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);
          }
          var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
          if (t1 < 0) n1 = 0.0;
          else {
            var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;
            t1 *= t1;
            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);
          }
          var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
          if (t2 < 0) n2 = 0.0;
          else {
            var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;
            t2 *= t2;
            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);
          }
          var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
          if (t3 < 0) n3 = 0.0;
          else {
            var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;
            t3 *= t3;
            n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);
          }
          // Add contributions from each corner to get the final noise value.
          // The result is scaled to stay just inside [-1,1]
          return 32.0 * (n0 + n1 + n2 + n3);
        },
        // 4D simplex noise, better simplex rank ordering method 2012-03-09
        noise4D: function(x, y, z, w) {
          var perm = this.perm;
          var grad4 = this.grad4;

          var n0, n1, n2, n3, n4; // Noise contributions from the five corners
          // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
          var s = (x + y + z + w) * F4; // Factor for 4D skewing
          var i = Math.floor(x + s);
          var j = Math.floor(y + s);
          var k = Math.floor(z + s);
          var l = Math.floor(w + s);
          var t = (i + j + k + l) * G4; // Factor for 4D unskewing
          var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
          var Y0 = j - t;
          var Z0 = k - t;
          var W0 = l - t;
          var x0 = x - X0; // The x,y,z,w distances from the cell origin
          var y0 = y - Y0;
          var z0 = z - Z0;
          var w0 = w - W0;
          // For the 4D case, the simplex is a 4D shape I won't even try to describe.
          // To find out which of the 24 possible simplices we're in, we need to
          // determine the magnitude ordering of x0, y0, z0 and w0.
          // Six pair-wise comparisons are performed between each possible pair
          // of the four coordinates, and the results are used to rank the numbers.
          var rankx = 0;
          var ranky = 0;
          var rankz = 0;
          var rankw = 0;
          if (x0 > y0) rankx++;
          else ranky++;
          if (x0 > z0) rankx++;
          else rankz++;
          if (x0 > w0) rankx++;
          else rankw++;
          if (y0 > z0) ranky++;
          else rankz++;
          if (y0 > w0) ranky++;
          else rankw++;
          if (z0 > w0) rankz++;
          else rankw++;
          var i1, j1, k1, l1; // The integer offsets for the second simplex corner
          var i2, j2, k2, l2; // The integer offsets for the third simplex corner
          var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
          // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
          // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
          // impossible. Only the 24 indices which have non-zero entries make any sense.
          // We use a thresholding to set the coordinates in turn from the largest magnitude.
          // Rank 3 denotes the largest coordinate.
          i1 = rankx >= 3 ? 1 : 0;
          j1 = ranky >= 3 ? 1 : 0;
          k1 = rankz >= 3 ? 1 : 0;
          l1 = rankw >= 3 ? 1 : 0;
          // Rank 2 denotes the second largest coordinate.
          i2 = rankx >= 2 ? 1 : 0;
          j2 = ranky >= 2 ? 1 : 0;
          k2 = rankz >= 2 ? 1 : 0;
          l2 = rankw >= 2 ? 1 : 0;
          // Rank 1 denotes the second smallest coordinate.
          i3 = rankx >= 1 ? 1 : 0;
          j3 = ranky >= 1 ? 1 : 0;
          k3 = rankz >= 1 ? 1 : 0;
          l3 = rankw >= 1 ? 1 : 0;
          // The fifth corner has all coordinate offsets = 1, so no need to compute that.
          var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
          var y1 = y0 - j1 + G4;
          var z1 = z0 - k1 + G4;
          var w1 = w0 - l1 + G4;
          var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords
          var y2 = y0 - j2 + 2.0 * G4;
          var z2 = z0 - k2 + 2.0 * G4;
          var w2 = w0 - l2 + 2.0 * G4;
          var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords
          var y3 = y0 - j3 + 3.0 * G4;
          var z3 = z0 - k3 + 3.0 * G4;
          var w3 = w0 - l3 + 3.0 * G4;
          var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords
          var y4 = y0 - 1.0 + 4.0 * G4;
          var z4 = z0 - 1.0 + 4.0 * G4;
          var w4 = w0 - 1.0 + 4.0 * G4;
          // Work out the hashed gradient indices of the five simplex corners
          var ii = i & 255;
          var jj = j & 255;
          var kk = k & 255;
          var ll = l & 255;
          // Calculate the contribution from the five corners
          var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
          if (t0 < 0) n0 = 0.0;
          else {
            var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;
            t0 *= t0;
            n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);
          }
          var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
          if (t1 < 0) n1 = 0.0;
          else {
            var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;
            t1 *= t1;
            n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);
          }
          var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
          if (t2 < 0) n2 = 0.0;
          else {
            var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;
            t2 *= t2;
            n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);
          }
          var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
          if (t3 < 0) n3 = 0.0;
          else {
            var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;
            t3 *= t3;
            n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);
          }
          var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
          if (t4 < 0) n4 = 0.0;
          else {
            var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;
            t4 *= t4;
            n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);
          }
          // Sum up and scale the result to cover the range [-1,1]
          return 27.0 * (n0 + n1 + n2 + n3 + n4);
        }
      };

      function buildPermutationTable(random) {
        var i;
        var p = new Uint8Array(256);
        for (i = 0; i < 256; i++) {
          p[i] = i;
        }
        for (i = 0; i < 255; i++) {
          var r = i + ~~(random() * (256 - i));
          var aux = p[i];
          p[i] = p[r];
          p[r] = aux;
        }
        return p;
      }
      SimplexNoise._buildPermutationTable = buildPermutationTable;

      function alea() {
        // Johannes Baagøe <baagoe@baagoe.com>, 2010
        var s0 = 0;
        var s1 = 0;
        var s2 = 0;
        var c = 1;

        var mash = masher();
        s0 = mash(' ');
        s1 = mash(' ');
        s2 = mash(' ');

        for (var i = 0; i < arguments.length; i++) {
          s0 -= mash(arguments[i]);
          if (s0 < 0) {
            s0 += 1;
          }
          s1 -= mash(arguments[i]);
          if (s1 < 0) {
            s1 += 1;
          }
          s2 -= mash(arguments[i]);
          if (s2 < 0) {
            s2 += 1;
          }
        }
        mash = null;
        return function() {
          var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32
          s0 = s1;
          s1 = s2;
          return s2 = t - (c = t | 0);
        };
      }
      function masher() {
        var n = 0xefc8249d;
        return function(data) {
          data = data.toString();
          for (var i = 0; i < data.length; i++) {
            n += data.charCodeAt(i);
            var h = 0.02519603282416938 * n;
            n = h >>> 0;
            h -= n;
            h *= n;
            n = h >>> 0;
            h -= n;
            n += h * 0x100000000; // 2^32
          }
          return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
        };
      }
      // common js
      exports.SimplexNoise = SimplexNoise;
      // nodejs
      {
        module.exports = SimplexNoise;
      }

    })();
    });
    var simplexNoise_1 = simplexNoise.SimplexNoise;

    const draw_line$1 = (p, id, nw, ne, se, sw, threshold, dim) => {
        const n = [p.map(threshold, nw, ne, 0, dim), 0];
        const e = [dim, p.map(threshold, ne, se, 0, dim)];
        const s = [p.map(threshold, sw, se, 0, dim), dim];
        const w = [0, p.map(threshold, nw, sw, 0, dim)];

        if (id === 1 || id === 14) p.line(...s, ...w);
        else if (id === 2 || id === 13) p.line(...e, ...s);
        else if (id === 3 || id === 12) p.line(...e, ...w);
        else if (id === 4 || id === 11) p.line(...n, ...e);
        else if (id === 6 || id === 9) p.line(...n, ...s);
        else if (id === 7 || id === 8) p.line(...w, ...n);
        else if (id === 5 || id == 10) {
            p.line(...e, ...s);
            p.line(...w, ...n);
        }
    };

    const draw_poly = (p, id, v1, v2, v3, v4, threshold, dim) => {
        const n = [p.map(threshold, v1, v2, 0, dim), 0];
        const e = [dim, p.map(threshold, v2, v3, 0, dim)];
        const s = [p.map(threshold, v4, v3, 0, dim), dim];
        const w = [0, p.map(threshold, v1, v4, 0, dim)];
        const nw = [0, 0];
        const ne = [dim, 0];
        const se = [dim, dim];
        const sw = [0, dim];

        p.noStroke();
        p.beginShape();
        if (id === 1) {
            p.vertex(...s);
            p.vertex(...w);
            p.vertex(...sw);
        } else if (id === 2) {
            p.vertex(...e);
            p.vertex(...s);
            p.vertex(...se);
        } else if (id === 3) {
            p.vertex(...e);
            p.vertex(...w);
            p.vertex(...sw);
            p.vertex(...se);
        } else if (id === 4) {
            p.vertex(...n);
            p.vertex(...e);
            p.vertex(...ne);
        } else if (id === 5) {
            p.vertex(...e);
            p.vertex(...s);
            p.vertex(...sw);
            p.vertex(...w);
            p.vertex(...n);
            p.vertex(...ne);
        } else if (id === 6) {
            p.vertex(...n);
            p.vertex(...s);
            p.vertex(...se);
            p.vertex(...ne);
        } else if (id === 7) {
            p.vertex(...w);
            p.vertex(...n);
            p.vertex(...ne);
            p.vertex(...se);
            p.vertex(...sw);
        } else if (id === 15) {
            p.vertex(...nw);
            p.vertex(...ne);
            p.vertex(...se);
            p.vertex(...sw);
        } else if (id === 14) {
            p.vertex(...s);
            p.vertex(...w);
            p.vertex(...nw);
            p.vertex(...ne);
            p.vertex(...se);
        } else if (id === 13) {
            p.vertex(...e);
            p.vertex(...s);
            p.vertex(...sw);
            p.vertex(...nw);
            p.vertex(...ne);
        } else if (id === 12) {
            p.vertex(...e);
            p.vertex(...w);
            p.vertex(...nw);
            p.vertex(...ne);
        } else if (id === 11) {
            p.vertex(...n);
            p.vertex(...e);
            p.vertex(...se);
            p.vertex(...sw);
            p.vertex(...nw);
        } else if (id === 10) {
            p.vertex(...e);
            p.vertex(...se);
            p.vertex(...s);
            p.vertex(...w);
            p.vertex(...nw);
            p.vertex(...n);
        } else if (id === 9) {
            p.vertex(...n);
            p.vertex(...s);
            p.vertex(...sw);
            p.vertex(...nw);
        } else if (id === 8) {
            p.vertex(...w);
            p.vertex(...n);
            p.vertex(...nw);
        }
        p.endShape(p.CLOSE);
    };

    const terrain = (p) => {
        console.log("Topographic by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/topographic");

        const cell_dim = 5;
        let scale = 1;
        let nHeight;
        let nWidth;

        const noise_dim = 0.003;
        const persistence = 0.4;

        let THE_SEED;
        let simplex;
        let noise_grid;

        const bgColor = '#000';
        const strokeColor = '#F7347A';
        const seaColor = '#00FFFF';

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');
        };

        p.draw = () => {
            p.clear();
            p.background(bgColor);
            p.scale(scale);

            display();
        };

        const display = () => {
            setValues();
            p.noLoop();

            process_grid(0.3, 10, 0.7 / 10, [seaColor]);
            process_grid(-1, 120, 1.3 / 120, []);
        };

        const setValues = () => {
            nHeight = (p.windowHeight / 5) / scale;
            nWidth = (p.windowWidth / 5) / scale;

            THE_SEED = p.floor(p.random(999));
            simplex = new simplexNoise(THE_SEED);
            p.randomSeed(THE_SEED);

            noise_grid = build_noise_grid();
        };

        const process_grid = (init, steps, delta, fill_palette) => {
            const thresholds = build_threshold_list(init, steps, delta);
            const filled = fill_palette.length !== 0;

            p.push();
            for (let y = 0; y < nHeight; y++) {
                p.push();
                for (let x = 0; x < nWidth; x++) {
                    process_cell(x, y, filled, thresholds, delta);
                    p.translate(cell_dim, 0);
                }
                p.pop();
                p.translate(0, cell_dim);
            }
            p.pop();
        };

        const process_cell = (x, y, filled, thresholds, delta) => {
            const v1 = get_noise(x, y);
            const v2 = get_noise(x + 1, y);
            const v3 = get_noise(x + 1, y + 1);
            const v4 = get_noise(x, y + 1);

            const min = p.min([v1, v2, v3, v4]);
            const max = p.max([v1, v2, v3, v4]);
            const relevant_thresholds = thresholds.filter(
                t => t.val >= min - delta && t.val <= max
            );

            for (const t of relevant_thresholds) {
                const b1 = v1 > t.val ? 8 : 0;
                const b2 = v2 > t.val ? 4 : 0;
                const b3 = v3 > t.val ? 2 : 0;
                const b4 = v4 > t.val ? 1 : 0;

                const id = b1 + b2 + b3 + b4;

                if (filled) {
                    p.fill(t.col);
                    draw_poly(p, id, v1, v2, v3, v4, t.val, cell_dim);
                } else {
                    p.stroke(strokeColor);
                    draw_line$1(p, id, v1, v2, v3, v4, t.val, cell_dim);
                }
            }
        };

        const get_noise = (x, y) => {
            return noise_grid[y][x];
        };

        const build_noise_grid = () => {
            let grid = [];
            for (let y = 0; y < nHeight + 1; y++) {
                let row = [];
                for (let x = 0; x < nWidth + 1; x++) {
                    row.push(sum_octave(16, x, y));
                }
                grid.push(row);
            }
            return grid;
        };

        const build_threshold_list = (init, steps, delta) => {
            let thresholds = [];
            for (let t = 0; t <= steps; t++) {
                let col = seaColor;
                thresholds.push({
                    val: init + t * delta,
                    col: col
                });
            }
            return thresholds;
        };

        const sum_octave = (num_iterations, x, y) => {
            let noise = 0;
            let maxAmp = 0;
            let amp = 1;
            let freq = noise_dim;

            for (let i = 0; i < num_iterations; i++) {
                noise += simplex.noise2D(14.3 + x * freq, 5.71 + y * freq) * amp;
                maxAmp += amp;
                amp *= persistence;
                freq *= 2;
            }
            return noise / maxAmp;
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
            setTimeout(() => {
                p.redraw();
            }, 1000);
        };
    };

    const topographic = (p) => {
        console.log("Topographic by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/topographic");

        const cell_dim = 5;
        let scale = 1;
        let nHeight;
        let nWidth;

        const noise_scale = 300;
        const noise_persistence = 0.3;
        const sigm = 2;

        let THE_SEED;
        let simplex;
        let noise_grid;

        const palette = getRandomPalette(5);

        const line_density = 50;

        const bgColor = '#000';
        const strokeColor = '#F7347A';


        p.setup = function () {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

        };

        const setValues = () => {
            nHeight = (p.windowHeight / 5) / scale;
            nWidth = (p.windowWidth / 5) / scale;

            THE_SEED = p.floor(p.random(999));
            simplex = new simplexNoise(THE_SEED);
            p.randomSeed(THE_SEED);

            noise_grid = build_noise_grid();
        };

        p.draw = () => {
            p.clear();
            p.scale(scale);
            p.background(bgColor);

            display();
        };

        const display = () => {
            setValues();
            p.noLoop();
            process_grid(-1, 2 * line_density, 1 / line_density, palette);
            p.pop();
        };

        const process_grid = (init, steps, delta, fill_palette) => {
            const thresholds = build_threshold_list(init, steps, delta, fill_palette);
            const filled = fill_palette.length !== 0;

            p.push();
            for (let y = 0; y < nHeight; y++) {
                p.push();
                for (let x = 0; x < nWidth; x++) {
                    process_cell(x, y, filled, thresholds, delta);
                    p.translate(cell_dim, 0);
                }
                p.pop();
                p.translate(0, cell_dim);
            }
            p.pop();
        };

        const process_cell = (x, y, filled, thresholds, delta) => {
            const v1 = get_noise(x, y);
            const v2 = get_noise(x + 1, y);
            const v3 = get_noise(x + 1, y + 1);
            const v4 = get_noise(x, y + 1);

            const min = p.min([v1, v2, v3, v4]);
            const max = p.max([v1, v2, v3, v4]);
            const relevant_thresholds = thresholds.filter(
                t => t.val >= min - delta && t.val <= max
            );

            for (const t of relevant_thresholds) {
                const b1 = v1 > t.val ? 8 : 0;
                const b2 = v2 > t.val ? 4 : 0;
                const b3 = v3 > t.val ? 2 : 0;
                const b4 = v4 > t.val ? 1 : 0;

                const id = b1 + b2 + b3 + b4;

                if (filled) {
                    p.fill(t.col);
                    draw_poly(p, id, v1, v2, v3, v4, t.val, cell_dim);
                } else {
                    p.stroke(strokeColor);
                    draw_line(p, id, v1, v2, v3, v4, t.val, cell_dim);
                }
            }
        };

        const get_noise = (x, y) => {
            return noise_grid[y][x];
        };

        const build_noise_grid = () => {
            let grid = [];
            for (let y = 0; y < nHeight + 1; y++) {
                let row = [];
                for (let x = 0; x < nWidth + 1; x++) {
                    row.push(sum_octave(16, x, y));
                }
                grid.push(row);
            }
            return grid;
        };

        function build_threshold_list(init, steps, delta, colors) {
            const thresholds = [];
            for (let t = 0; t <= steps; t++) {
                let col = colors.length === 0 ? '#fff' : colors[p.floor(p.random(colors.length))];
                thresholds.push({
                    val: init + t * delta,
                    col: col
                });
            }
            return thresholds;
        }

        function sum_octave(num_iterations, x, y) {
            let noise = 0;
            let maxAmp = 0;
            let amp = 1;
            let freq = 1 / noise_scale;

            for (let i = 0; i < num_iterations; i++) {
                noise += simplex.noise3D(x * freq, y * freq, i) * amp;
                maxAmp += amp;
                amp *= noise_persistence;
                freq *= 2;
            }
            var output = apply_sigmoid(noise / maxAmp, sigm);
            return output;
        }

        function apply_sigmoid(value, intensity) {
            if (intensity === 0) return value;
            return 2 * sigmoid(value * intensity) - 1;
        }

        function sigmoid(x) {
            return 1 / (1 + p.exp(-x));
        }

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
            setTimeout(() => {
                p.redraw();
            }, 1000);
        };
    };

    const topography = (p) => {
        console.log("Topography by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/topography");

        let rings = 15;
        let dim_init = 1;

        let ox = p.random(10000);
        let oy = p.random(10000);

        let arr = [];
        let spacing = -10;
        let magnitude = 75;
        let noise_delta = 15;
        let noise_radius = 0.25;

        let coorX = p.randomGaussian(p.windowWidth / 2, 250);
        let coorY = p.randomGaussian(p.windowHeight / 2, 250);

        let cols = ['#fa4', '#fb3', '#ec4', '#dd5', '#ada', '#9bc'];

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.background(0);
            p.strokeWeight(1);
            p.stroke(0);
            p.noLoop();
            p.smooth();

            arr = createInitialArray();
        };

        p.draw = () => {
            p.push();
            p.translate(coorX, coorY);
            p.scale((p.windowWidth + p.windowHeight) / 1500);

            p.clear();
            display();
            p.pop();
            display_crosses();
            display_grid();
        };

        const display = () => {
            for (let i = 0; i < rings; i++) {
                if (i % 6 == 0) p.strokeWeight(2);
                else p.strokeWeight(1);

                p.fill(cols[p.floor(i / rings * cols.length)]);

                let new_arr = [];

                p.beginShape();
                for (const ang in arr) {
                    let rad = p.radians(ang);
                    let new_radius = spacing + arr[ang] + getNoise(rad, i * noise_delta) * magnitude;

                    p.vertex(new_radius * p.cos(rad), new_radius * p.sin(rad));
                    new_arr[ang] = new_radius;
                }
                p.beginContour();
                for (const ang in arr) {
                    let rad = p.radians(359 - ang);
                    p.vertex(arr[359 - ang] * p.cos(rad), arr[359 - ang] * p.sin(rad));
                }
                p.endContour();

                p.endShape(p.CLOSE);

                arr = new_arr;
            }
        };

        const createInitialArray = () => {
            let array = [];
            for (let i = 0; i < 360; i++) {
                array.push(dim_init);
            }
            return array;
        };

        const display_crosses = () => {
            for (let i = 0; i < 50; i++) {
                p.push();
                p.translate(p.random(20, p.windowWidth - 20), p.random(20, p.windowHeight - 20));

                p.line(-5, 0, 5, 0);
                p.line(0, -5, 0, 5);
                p.pop();
            }
        };

        const display_grid = () => {
            p.stroke(0, 80);
            p.strokeWeight(1);

            let grid_space = 160;

            for (let i = grid_space; i < p.windowHeight; i += grid_space) {
                p.line(0, i, p.windowWidth, i);
            }

            for (let j = grid_space; j < p.windowWidth; j += grid_space) {
                p.line(j, 0, j, p.windowHeight);
            }
        };

        const getNoise = (radian, dim) => {
            let r = radian % p.TAU;

            if (r < 0.0) {
                r += p.TAU;
            }
            return p.noise(ox + p.cos(r) * (noise_radius + dim / 200), oy + p.sin(r) * (noise_radius + dim / 200), dim);
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
            arr = createInitialArray();
            p.redraw();
        };
    };

    const trunk = (p) => {
        console.log("Trunk by Kjetil Midtgarden Golid.");
        console.log("Link to project: https://github.com/kgolid/p5ycho/tree/master/trunk");

        let rings = 15;
        let dim_init = 10;
        let dim_delta = 15;

        let chaos_init = 0.2;
        let chaos_delta = 0.10;
        let chaos_mag = 25;

        let ox = p.random(10000);
        let oy = p.random(10000);
        let oz = p.random(10000);

        let scale;

        const strokeColor = getRandomPalette();

        p.setup = () => {
            let canvas = p.createCanvas(p.windowWidth, p.windowHeight);

            canvas.parent('stage');
            canvas.position(0, 0);
            canvas.style('z-index', '-1');

            p.strokeWeight(2);
            p.stroke(strokeColor);
            p.smooth();
            p.noFill();
        };

        p.draw = () => {
            p.clear();
            p.translate(p.width / 2, p.height / 2);
            scale = p.windowWidth < p.windowHeight ? p.windowWidth / 400 : p.windowHeight / 400;
            p.scale(scale);

            display();
        };

        const display = () => {
            oy -= 0.02;
            oz += 0.01;

            for (let i = 0; i < rings; i++) {
                p.beginShape();

                for (let angle = 0; angle < 360; angle++) {
                    let radian = p.radians(angle);
                    let radius = (chaos_mag * getNoiseWithTime(radian, chaos_delta * i + chaos_init, oz)) + (dim_delta * i + dim_init);
                    p.vertex(radius * p.cos(radian), radius * p.sin(radian));
                }

                p.endShape(p.CLOSE);
            }
        };

        const getNoiseWithTime = (radian, dim, time) => {
            let r = radian % p.TWO_PI;

            if (r < 0.0) {
                r += p.TWO_PI;
            }

            return p.noise(ox + p.cos(r) * dim, oy + p.sin(r) * dim, oz + time);
        };

        p.windowResized = () => {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };
    };

    let sketches = [
        curvedShapes, crossGrid, shapes, lorenz, globe, smokeRings,
        stripesBW, stripes, terrain, topographic, topography, trunk
    ];

    const randomNumGenerator = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1) + min);
    };

    const sketch = sketches[randomNumGenerator(0, sketches.length - 1)];

    new p5(sketch);

}));

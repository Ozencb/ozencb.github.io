(function (factory) {
	typeof define === 'function' && define.amd ? define(factory) :
	factory();
}(function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var lodash_debounce = debounce;

	const crossGrid = (p5) => {
	  console.info('Cross Grid by Kjetil Midtgarden Golid.');
	  console.info('Link to project: https://github.com/kgolid/p5ycho/tree/master/lab/cross-grid');
	  const p = p5;

	  let tick;

	  const crossDim = 5;
	  const gridSize = 25;
	  const cellDim = 25;
	  const nheight = 1.5;
	  const nzoom = 25;

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    p.stroke(50);

	    tick = 0;
	  };

	  const drawCross = (x, y) => {
	    p.push();
	    p.translate(x, y);
	    p.line(-crossDim / 2, 0, crossDim / 2, 0);
	    p.line(0, -crossDim / 2, 0, crossDim / 2);
	    p.pop();
	  };

	  const drawGrid = () => {
	    for (let j = 0; j < gridSize; j += 1) {
	      for (let i = 0; i < gridSize; i += 1) {
	        p.push();
	        p.scale(p.map(p.noise(i / nzoom + tick, j / nzoom), 0, 1, 1 / nheight, nheight));
	        drawCross((i - gridSize / 2) * cellDim, (j - gridSize / 2) * cellDim);
	        p.pop();
	      }
	    }
	  };

	  p.draw = () => {
	    p.clear();
	    p.translate(p.width / 2, p.height / 2);
	    p.scale(Math.max(p.windowWidth / 500, p.windowHeight / 500));

	    drawGrid();

	    tick += 0.005;
	  };


	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const cubeGrid = (p5) => {
	  const p = p5;

	  let tx;
	  let ty;
	  let tz;
	  let gap;
	  let rows;
	  let cols;
	  let depths;
	  let theta;
	  let planeWidth;
	  let planeHeight;
	  let planeDepth;

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    const cube = 150;

	    tx = cube;
	    ty = cube;
	    tz = cube;

	    gap = 50;

	    rows = 3;
	    cols = 3;
	    depths = 3;

	    theta = 0;

	    planeWidth = tx * (cols - 1);
	    planeHeight = ty * (rows - 1);
	    planeDepth = tz * (depths - 1);
	  };

	  p.draw = () => {
	    p.clear();
	    p.scale(Math.min(p.windowWidth / 1000, p.windowHeight / 1000));
	    p.stroke(240, 20);

	    p.rotateZ(theta);
	    p.rotateY(theta);
	    p.rotateX(theta);

	    p.translate(-planeWidth / 2, -planeHeight / 2, planeDepth / 2);

	    p.noStroke();


	    p.directionalLight(255, 0, 0, p.width, -p.height);
	    p.directionalLight(0, 0, 255, -p.width, -p.height);
	    p.directionalLight(0, 255, 0, -p.width, p.height);

	    for (let i = 0; i < cols; i += 1) {
	      p.push();
	      p.translate(tx * i, 0, 0);

	      for (let j = 0; j < rows; j += 1) {
	        p.push();
	        p.translate(0, ty * j, 0);

	        for (let k = 0; k < depths; k += 1) {
	          p.push();
	          p.translate(0, 0, (tz * k) - planeDepth);

	          p.specularMaterial(250);
	          p.box(tx - gap, ty - gap, tz - gap);

	          p.pop();
	        }
	        p.pop();
	      }
	      p.pop();
	    }
	    theta += 0.01;
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const donut = (p5) => {
	  const p = p5;

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');
	  };

	  p.draw = () => {
	    p.clear();
	    p.normalMaterial();
	    p.scale(Math.max(p.windowWidth / 50, p.windowHeight / 50));

	    p.translate(0, 0, 0);
	    p.push();
	    p.rotateZ(p.frameCount * 0.003);
	    p.rotateX(p.frameCount * 0.001);
	    p.rotateY(p.frameCount * 0.007);
	    p.torus(75, 35);
	    p.pop();
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const lorenz = (p5) => {
	  console.info('Lorenz Attractor');
	  console.info('Link to project: https://editor.p5js.org/Bixbite/sketches/S10aGSejQ');

	  const p = p5;

	  const SIGMA = 10;
	  const RHO = 28;
	  const BETA = 8 / 3;
	  const DT = 1 / 60;
	  const MAX_LEN = 100;

	  let offset = 0;

	  let point;
	  const path = [];


	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    p.colorMode(p.HSB, 100);

	    point = p.createVector(1, 1, 1);
	  };

	  p.draw = () => {
	    p.clear();
	    p.scale(Math.min(p.windowWidth / 50, p.windowHeight / 50));
	    p.rotateZ(p.frameCount * 0.002);

	    const delta = p.createVector(
	      SIGMA * (point.y - point.x),
	      point.x * (RHO - point.z) - point.y,
	      point.x * point.y - BETA * point.z,
	    );

	    delta.mult(DT);

	    point.add(delta);
	    path.push(point.copy());

	    if (path.length > MAX_LEN) {
	      path.splice(0, 1);
	      offset += 1;
	    }

	    p.strokeWeight(5);
	    p.stroke(255);
	    p.noFill();

	    let prev = path[0];

	    for (let i = 1; i < path.length; i += 1) {
	      const next = path[i];

	      p.stroke(((i + offset) * 0.1) % 100, 100, 100 - (path.length - i) * (100 / MAX_LEN));
	      p.line(prev.x, prev.y, prev.z, next.x, next.y, next.z);
	      prev = next;
	    }
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const globe = (p5) => {
	  const p = p5;

	  const radius = 1000;
	  const size = 3;

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');
	  };

	  p.draw = () => {
	    p.clear();
	    p.scale(Math.min(p.windowWidth / 1000, p.windowHeight / 1000));

	    p.normalMaterial();


	    p.rotateX(p.frameCount * 0.002);
	    p.rotateY(p.frameCount * 0.002);
	    p.rotateZ(p.frameCount * 0.002);

	    for (let i = 0; i <= 12; i += 1) {
	      for (let j = 0; j <= 12; j += 1) {
	        const a = (j / 12) * p.PI;
	        const b = (i / 12) * p.PI;

	        p.push();

	        p.translate(
	          p.sin(2 * a) * radius * p.sin(b),
	          (p.cos(b) * radius),
	          p.cos(2 * a) * radius * p.sin(b),
	        );

	        p.sphere(size);
	        p.pop();
	      }
	    }
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const getRandomPalette = (colorAmount = 1) => {
	  const hex = '23456789AB'; // Exclude 1 and DEF to prevent getting very dark or bright colours
	  const palette = [];

	  for (let i = 0; i < colorAmount; i += 1) {
	    let color = '#';
	    for (let j = 0; j < 6; j += 1) {
	      color += hex[Math.floor(Math.random() * hex.length)];
	    }

	    if (colorAmount > 1) {
	      palette.push(color);
	    } else {
	      return color;
	    }
	  }
	  return palette;
	};

	const rings = (p5) => {
	  const p = p5;

	  let ox = 0;
	  let oy = 0;
	  let oz = 0;

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    p.strokeWeight(1);
	    p.smooth();
	    p.noFill();
	  };

	  const getNoise = (radian, dim, time) => {
	    let r = radian % p.TWO_PI;
	    if (r < 0.0) {
	      r += p.TWO_PI;
	    }
	    return p.noise(ox + p.cos(r) * dim, oy + p.sin(r) * dim, oz + time);
	  };

	  const display = () => {
	    p.stroke(getRandomPalette());

	    ox += 0.01;
	    oy += 0.01;
	    oz += 0.01;

	    for (let i = 0; i < 1; i += 1) {
	      p.beginShape();
	      for (let angle = 0; angle < 360; angle += 2) {
	        const radian = p.radians(angle);
	        const radius = 250 + p.map(getNoise(radian, 0.15, 1 * i), 0, 1, -150, 150);
	        p.vertex(radius * p.cos(radian), radius * p.sin(radian));
	      }
	      p.endShape(p.CLOSE);
	    }
	  };

	  p.draw = () => {
	    p.clear();
	    p.translate(p.width / 2, p.height / 2);
	    p.scale(Math.max(p.windowWidth / 600, p.windowHeight / 600));

	    display();
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	var simplexNoise = createCommonjsModule(function (module, exports) {
	/*
	 * A fast javascript implementation of simplex noise by Jonas Wagner

	Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
	Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
	With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
	Better rank ordering method by Stefan Gustavson in 2012.


	 Copyright (c) 2018 Jonas Wagner

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to deal
	 in the Software without restriction, including without limitation the rights
	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in all
	 copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 SOFTWARE.
	 */
	(function() {

	  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);
	  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;
	  var F3 = 1.0 / 3.0;
	  var G3 = 1.0 / 6.0;
	  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;
	  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;

	  function SimplexNoise(randomOrSeed) {
	    var random;
	    if (typeof randomOrSeed == 'function') {
	      random = randomOrSeed;
	    }
	    else if (randomOrSeed) {
	      random = alea(randomOrSeed);
	    } else {
	      random = Math.random;
	    }
	    this.p = buildPermutationTable(random);
	    this.perm = new Uint8Array(512);
	    this.permMod12 = new Uint8Array(512);
	    for (var i = 0; i < 512; i++) {
	      this.perm[i] = this.p[i & 255];
	      this.permMod12[i] = this.perm[i] % 12;
	    }

	  }
	  SimplexNoise.prototype = {
	    grad3: new Float32Array([1, 1, 0,
	      -1, 1, 0,
	      1, -1, 0,

	      -1, -1, 0,
	      1, 0, 1,
	      -1, 0, 1,

	      1, 0, -1,
	      -1, 0, -1,
	      0, 1, 1,

	      0, -1, 1,
	      0, 1, -1,
	      0, -1, -1]),
	    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,
	      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,
	      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,
	      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,
	      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,
	      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,
	      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,
	      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),
	    noise2D: function(xin, yin) {
	      var permMod12 = this.permMod12;
	      var perm = this.perm;
	      var grad3 = this.grad3;
	      var n0 = 0; // Noise contributions from the three corners
	      var n1 = 0;
	      var n2 = 0;
	      // Skew the input space to determine which simplex cell we're in
	      var s = (xin + yin) * F2; // Hairy factor for 2D
	      var i = Math.floor(xin + s);
	      var j = Math.floor(yin + s);
	      var t = (i + j) * G2;
	      var X0 = i - t; // Unskew the cell origin back to (x,y) space
	      var Y0 = j - t;
	      var x0 = xin - X0; // The x,y distances from the cell origin
	      var y0 = yin - Y0;
	      // For the 2D case, the simplex shape is an equilateral triangle.
	      // Determine which simplex we are in.
	      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
	      if (x0 > y0) {
	        i1 = 1;
	        j1 = 0;
	      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
	      else {
	        i1 = 0;
	        j1 = 1;
	      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
	      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
	      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
	      // c = (3-sqrt(3))/6
	      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
	      var y1 = y0 - j1 + G2;
	      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
	      var y2 = y0 - 1.0 + 2.0 * G2;
	      // Work out the hashed gradient indices of the three simplex corners
	      var ii = i & 255;
	      var jj = j & 255;
	      // Calculate the contribution from the three corners
	      var t0 = 0.5 - x0 * x0 - y0 * y0;
	      if (t0 >= 0) {
	        var gi0 = permMod12[ii + perm[jj]] * 3;
	        t0 *= t0;
	        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient
	      }
	      var t1 = 0.5 - x1 * x1 - y1 * y1;
	      if (t1 >= 0) {
	        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;
	        t1 *= t1;
	        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);
	      }
	      var t2 = 0.5 - x2 * x2 - y2 * y2;
	      if (t2 >= 0) {
	        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;
	        t2 *= t2;
	        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);
	      }
	      // Add contributions from each corner to get the final noise value.
	      // The result is scaled to return values in the interval [-1,1].
	      return 70.0 * (n0 + n1 + n2);
	    },
	    // 3D simplex noise
	    noise3D: function(xin, yin, zin) {
	      var permMod12 = this.permMod12;
	      var perm = this.perm;
	      var grad3 = this.grad3;
	      var n0, n1, n2, n3; // Noise contributions from the four corners
	      // Skew the input space to determine which simplex cell we're in
	      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
	      var i = Math.floor(xin + s);
	      var j = Math.floor(yin + s);
	      var k = Math.floor(zin + s);
	      var t = (i + j + k) * G3;
	      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space
	      var Y0 = j - t;
	      var Z0 = k - t;
	      var x0 = xin - X0; // The x,y,z distances from the cell origin
	      var y0 = yin - Y0;
	      var z0 = zin - Z0;
	      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
	      // Determine which simplex we are in.
	      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
	      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
	      if (x0 >= y0) {
	        if (y0 >= z0) {
	          i1 = 1;
	          j1 = 0;
	          k1 = 0;
	          i2 = 1;
	          j2 = 1;
	          k2 = 0;
	        } // X Y Z order
	        else if (x0 >= z0) {
	          i1 = 1;
	          j1 = 0;
	          k1 = 0;
	          i2 = 1;
	          j2 = 0;
	          k2 = 1;
	        } // X Z Y order
	        else {
	          i1 = 0;
	          j1 = 0;
	          k1 = 1;
	          i2 = 1;
	          j2 = 0;
	          k2 = 1;
	        } // Z X Y order
	      }
	      else { // x0<y0
	        if (y0 < z0) {
	          i1 = 0;
	          j1 = 0;
	          k1 = 1;
	          i2 = 0;
	          j2 = 1;
	          k2 = 1;
	        } // Z Y X order
	        else if (x0 < z0) {
	          i1 = 0;
	          j1 = 1;
	          k1 = 0;
	          i2 = 0;
	          j2 = 1;
	          k2 = 1;
	        } // Y Z X order
	        else {
	          i1 = 0;
	          j1 = 1;
	          k1 = 0;
	          i2 = 1;
	          j2 = 1;
	          k2 = 0;
	        } // Y X Z order
	      }
	      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
	      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
	      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
	      // c = 1/6.
	      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
	      var y1 = y0 - j1 + G3;
	      var z1 = z0 - k1 + G3;
	      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
	      var y2 = y0 - j2 + 2.0 * G3;
	      var z2 = z0 - k2 + 2.0 * G3;
	      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
	      var y3 = y0 - 1.0 + 3.0 * G3;
	      var z3 = z0 - 1.0 + 3.0 * G3;
	      // Work out the hashed gradient indices of the four simplex corners
	      var ii = i & 255;
	      var jj = j & 255;
	      var kk = k & 255;
	      // Calculate the contribution from the four corners
	      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
	      if (t0 < 0) n0 = 0.0;
	      else {
	        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;
	        t0 *= t0;
	        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);
	      }
	      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
	      if (t1 < 0) n1 = 0.0;
	      else {
	        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;
	        t1 *= t1;
	        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);
	      }
	      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
	      if (t2 < 0) n2 = 0.0;
	      else {
	        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;
	        t2 *= t2;
	        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);
	      }
	      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
	      if (t3 < 0) n3 = 0.0;
	      else {
	        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;
	        t3 *= t3;
	        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);
	      }
	      // Add contributions from each corner to get the final noise value.
	      // The result is scaled to stay just inside [-1,1]
	      return 32.0 * (n0 + n1 + n2 + n3);
	    },
	    // 4D simplex noise, better simplex rank ordering method 2012-03-09
	    noise4D: function(x, y, z, w) {
	      var perm = this.perm;
	      var grad4 = this.grad4;

	      var n0, n1, n2, n3, n4; // Noise contributions from the five corners
	      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
	      var s = (x + y + z + w) * F4; // Factor for 4D skewing
	      var i = Math.floor(x + s);
	      var j = Math.floor(y + s);
	      var k = Math.floor(z + s);
	      var l = Math.floor(w + s);
	      var t = (i + j + k + l) * G4; // Factor for 4D unskewing
	      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
	      var Y0 = j - t;
	      var Z0 = k - t;
	      var W0 = l - t;
	      var x0 = x - X0; // The x,y,z,w distances from the cell origin
	      var y0 = y - Y0;
	      var z0 = z - Z0;
	      var w0 = w - W0;
	      // For the 4D case, the simplex is a 4D shape I won't even try to describe.
	      // To find out which of the 24 possible simplices we're in, we need to
	      // determine the magnitude ordering of x0, y0, z0 and w0.
	      // Six pair-wise comparisons are performed between each possible pair
	      // of the four coordinates, and the results are used to rank the numbers.
	      var rankx = 0;
	      var ranky = 0;
	      var rankz = 0;
	      var rankw = 0;
	      if (x0 > y0) rankx++;
	      else ranky++;
	      if (x0 > z0) rankx++;
	      else rankz++;
	      if (x0 > w0) rankx++;
	      else rankw++;
	      if (y0 > z0) ranky++;
	      else rankz++;
	      if (y0 > w0) ranky++;
	      else rankw++;
	      if (z0 > w0) rankz++;
	      else rankw++;
	      var i1, j1, k1, l1; // The integer offsets for the second simplex corner
	      var i2, j2, k2, l2; // The integer offsets for the third simplex corner
	      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
	      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
	      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
	      // impossible. Only the 24 indices which have non-zero entries make any sense.
	      // We use a thresholding to set the coordinates in turn from the largest magnitude.
	      // Rank 3 denotes the largest coordinate.
	      i1 = rankx >= 3 ? 1 : 0;
	      j1 = ranky >= 3 ? 1 : 0;
	      k1 = rankz >= 3 ? 1 : 0;
	      l1 = rankw >= 3 ? 1 : 0;
	      // Rank 2 denotes the second largest coordinate.
	      i2 = rankx >= 2 ? 1 : 0;
	      j2 = ranky >= 2 ? 1 : 0;
	      k2 = rankz >= 2 ? 1 : 0;
	      l2 = rankw >= 2 ? 1 : 0;
	      // Rank 1 denotes the second smallest coordinate.
	      i3 = rankx >= 1 ? 1 : 0;
	      j3 = ranky >= 1 ? 1 : 0;
	      k3 = rankz >= 1 ? 1 : 0;
	      l3 = rankw >= 1 ? 1 : 0;
	      // The fifth corner has all coordinate offsets = 1, so no need to compute that.
	      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
	      var y1 = y0 - j1 + G4;
	      var z1 = z0 - k1 + G4;
	      var w1 = w0 - l1 + G4;
	      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords
	      var y2 = y0 - j2 + 2.0 * G4;
	      var z2 = z0 - k2 + 2.0 * G4;
	      var w2 = w0 - l2 + 2.0 * G4;
	      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords
	      var y3 = y0 - j3 + 3.0 * G4;
	      var z3 = z0 - k3 + 3.0 * G4;
	      var w3 = w0 - l3 + 3.0 * G4;
	      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords
	      var y4 = y0 - 1.0 + 4.0 * G4;
	      var z4 = z0 - 1.0 + 4.0 * G4;
	      var w4 = w0 - 1.0 + 4.0 * G4;
	      // Work out the hashed gradient indices of the five simplex corners
	      var ii = i & 255;
	      var jj = j & 255;
	      var kk = k & 255;
	      var ll = l & 255;
	      // Calculate the contribution from the five corners
	      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
	      if (t0 < 0) n0 = 0.0;
	      else {
	        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;
	        t0 *= t0;
	        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);
	      }
	      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
	      if (t1 < 0) n1 = 0.0;
	      else {
	        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;
	        t1 *= t1;
	        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);
	      }
	      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
	      if (t2 < 0) n2 = 0.0;
	      else {
	        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;
	        t2 *= t2;
	        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);
	      }
	      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
	      if (t3 < 0) n3 = 0.0;
	      else {
	        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;
	        t3 *= t3;
	        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);
	      }
	      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
	      if (t4 < 0) n4 = 0.0;
	      else {
	        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;
	        t4 *= t4;
	        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);
	      }
	      // Sum up and scale the result to cover the range [-1,1]
	      return 27.0 * (n0 + n1 + n2 + n3 + n4);
	    }
	  };

	  function buildPermutationTable(random) {
	    var i;
	    var p = new Uint8Array(256);
	    for (i = 0; i < 256; i++) {
	      p[i] = i;
	    }
	    for (i = 0; i < 255; i++) {
	      var r = i + ~~(random() * (256 - i));
	      var aux = p[i];
	      p[i] = p[r];
	      p[r] = aux;
	    }
	    return p;
	  }
	  SimplexNoise._buildPermutationTable = buildPermutationTable;

	  function alea() {
	    // Johannes Baagøe <baagoe@baagoe.com>, 2010
	    var s0 = 0;
	    var s1 = 0;
	    var s2 = 0;
	    var c = 1;

	    var mash = masher();
	    s0 = mash(' ');
	    s1 = mash(' ');
	    s2 = mash(' ');

	    for (var i = 0; i < arguments.length; i++) {
	      s0 -= mash(arguments[i]);
	      if (s0 < 0) {
	        s0 += 1;
	      }
	      s1 -= mash(arguments[i]);
	      if (s1 < 0) {
	        s1 += 1;
	      }
	      s2 -= mash(arguments[i]);
	      if (s2 < 0) {
	        s2 += 1;
	      }
	    }
	    mash = null;
	    return function() {
	      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32
	      s0 = s1;
	      s1 = s2;
	      return s2 = t - (c = t | 0);
	    };
	  }
	  function masher() {
	    var n = 0xefc8249d;
	    return function(data) {
	      data = data.toString();
	      for (var i = 0; i < data.length; i++) {
	        n += data.charCodeAt(i);
	        var h = 0.02519603282416938 * n;
	        n = h >>> 0;
	        h -= n;
	        h *= n;
	        n = h >>> 0;
	        h -= n;
	        n += h * 0x100000000; // 2^32
	      }
	      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
	    };
	  }
	  // common js
	  exports.SimplexNoise = SimplexNoise;
	  // nodejs
	  {
	    module.exports = SimplexNoise;
	  }

	})();
	});
	var simplexNoise_1 = simplexNoise.SimplexNoise;

	const drawLine = (p, id, nw, ne, se, sw, threshold, dim) => {
	  const n = [p.map(threshold, nw, ne, 0, dim), 0];
	  const e = [dim, p.map(threshold, ne, se, 0, dim)];
	  const s = [p.map(threshold, sw, se, 0, dim), dim];
	  const w = [0, p.map(threshold, nw, sw, 0, dim)];

	  if (id === 1 || id === 14) p.line(...s, ...w);
	  else if (id === 2 || id === 13) p.line(...e, ...s);
	  else if (id === 3 || id === 12) p.line(...e, ...w);
	  else if (id === 4 || id === 11) p.line(...n, ...e);
	  else if (id === 6 || id === 9) p.line(...n, ...s);
	  else if (id === 7 || id === 8) p.line(...w, ...n);
	  else if (id === 5 || id === 10) {
	    p.line(...e, ...s);
	    p.line(...w, ...n);
	  }
	};

	const drawPoly = (p, id, v1, v2, v3, v4, threshold, dim) => {
	  const n = [p.map(threshold, v1, v2, 0, dim), 0];
	  const e = [dim, p.map(threshold, v2, v3, 0, dim)];
	  const s = [p.map(threshold, v4, v3, 0, dim), dim];
	  const w = [0, p.map(threshold, v1, v4, 0, dim)];
	  const nw = [0, 0];
	  const ne = [dim, 0];
	  const se = [dim, dim];
	  const sw = [0, dim];

	  p.noStroke();
	  p.beginShape();
	  if (id === 1) {
	    p.vertex(...s);
	    p.vertex(...w);
	    p.vertex(...sw);
	  } else if (id === 2) {
	    p.vertex(...e);
	    p.vertex(...s);
	    p.vertex(...se);
	  } else if (id === 3) {
	    p.vertex(...e);
	    p.vertex(...w);
	    p.vertex(...sw);
	    p.vertex(...se);
	  } else if (id === 4) {
	    p.vertex(...n);
	    p.vertex(...e);
	    p.vertex(...ne);
	  } else if (id === 5) {
	    p.vertex(...e);
	    p.vertex(...s);
	    p.vertex(...sw);
	    p.vertex(...w);
	    p.vertex(...n);
	    p.vertex(...ne);
	  } else if (id === 6) {
	    p.vertex(...n);
	    p.vertex(...s);
	    p.vertex(...se);
	    p.vertex(...ne);
	  } else if (id === 7) {
	    p.vertex(...w);
	    p.vertex(...n);
	    p.vertex(...ne);
	    p.vertex(...se);
	    p.vertex(...sw);
	  } else if (id === 15) {
	    p.vertex(...nw);
	    p.vertex(...ne);
	    p.vertex(...se);
	    p.vertex(...sw);
	  } else if (id === 14) {
	    p.vertex(...s);
	    p.vertex(...w);
	    p.vertex(...nw);
	    p.vertex(...ne);
	    p.vertex(...se);
	  } else if (id === 13) {
	    p.vertex(...e);
	    p.vertex(...s);
	    p.vertex(...sw);
	    p.vertex(...nw);
	    p.vertex(...ne);
	  } else if (id === 12) {
	    p.vertex(...e);
	    p.vertex(...w);
	    p.vertex(...nw);
	    p.vertex(...ne);
	  } else if (id === 11) {
	    p.vertex(...n);
	    p.vertex(...e);
	    p.vertex(...se);
	    p.vertex(...sw);
	    p.vertex(...nw);
	  } else if (id === 10) {
	    p.vertex(...e);
	    p.vertex(...se);
	    p.vertex(...s);
	    p.vertex(...w);
	    p.vertex(...nw);
	    p.vertex(...n);
	  } else if (id === 9) {
	    p.vertex(...n);
	    p.vertex(...s);
	    p.vertex(...sw);
	    p.vertex(...nw);
	  } else if (id === 8) {
	    p.vertex(...w);
	    p.vertex(...n);
	    p.vertex(...nw);
	  }
	  p.endShape(p.CLOSE);
	};

	const terrain = (p5) => {
	  console.info('Topographic by Kjetil Midtgarden Golid.');
	  console.info('Link to project: https://github.com/kgolid/topographic');

	  const p = p5;

	  const cellDim = 5;
	  const scale = 2;
	  let nHeight;
	  let nWidth;

	  const noiseDim = 0.002;
	  const persistence = 0.4;

	  let THE_SEED;
	  let simplex;
	  let noiseGrid;

	  const strokeColor = '#F7347A';
	  const seaColor = '#000000';

	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    p.stroke(strokeColor);
	    p.strokeWeight(0.5);
	  };

	  const getNoise = (x, y) => noiseGrid[y][x];

	  const sumOctave = (numIterations, x, y) => {
	    let noise = 0;
	    let maxAmp = 0;
	    let amp = 1;
	    let freq = noiseDim;

	    for (let i = 0; i < numIterations; i += 1) {
	      noise += simplex.noise2D(14.3 + x * freq, 5.71 + y * freq) * amp;
	      maxAmp += amp;
	      amp *= persistence;
	      freq *= 2;
	    }
	    return noise / maxAmp;
	  };

	  const buildNoiseGrid = () => {
	    const grid = [];
	    for (let y = 0; y < nHeight + 1; y += 1) {
	      const row = [];
	      for (let x = 0; x < nWidth + 1; x += 1) {
	        row.push(sumOctave(16, x, y));
	      }
	      grid.push(row);
	    }
	    return grid;
	  };

	  const setValues = () => {
	    nHeight = (p.windowHeight / 5) / scale;
	    nWidth = (p.windowWidth / 5) / scale;

	    THE_SEED = p.floor(p.random(999));
	    simplex = new simplexNoise(THE_SEED);
	    p.randomSeed(THE_SEED);

	    noiseGrid = buildNoiseGrid();
	  };

	  const buildThresholdList = (init, steps, delta) => {
	    const thresholds = [];
	    for (let t = 0; t <= steps; t += 1) {
	      const col = seaColor;
	      thresholds.push({
	        val: init + t * delta,
	        col,
	      });
	    }
	    return thresholds;
	  };

	  const processCell = (x, y, filled, thresholds, delta) => {
	    const v1 = getNoise(x, y);
	    const v2 = getNoise(x + 1, y);
	    const v3 = getNoise(x + 1, y + 1);
	    const v4 = getNoise(x, y + 1);

	    const min = p.min([v1, v2, v3, v4]);
	    const max = p.max([v1, v2, v3, v4]);
	    const relevantThresholds = thresholds.filter(
	      (t) => t.val >= min - delta && t.val <= max,
	    );

	    Object.values(relevantThresholds).forEach((t) => {
	      const b1 = v1 > t.val ? 8 : 0;
	      const b2 = v2 > t.val ? 4 : 0;
	      const b3 = v3 > t.val ? 2 : 0;
	      const b4 = v4 > t.val ? 1 : 0;

	      const id = b1 + b2 + b3 + b4;

	      if (filled) {
	        p.fill(t.col);
	        drawPoly(p, id, v1, v2, v3, v4, t.val, cellDim);
	      } else {
	        p.stroke(strokeColor);
	        drawLine(p, id, v1, v2, v3, v4, t.val, cellDim);
	      }
	    });
	  };

	  const processGrid = (init, steps, delta, fillPalette) => {
	    const thresholds = buildThresholdList(init, steps, delta);
	    const filled = fillPalette.length !== 0;

	    p.push();
	    for (let y = 0; y < nHeight; y += 1) {
	      p.push();
	      for (let x = 0; x < nWidth; x += 1) {
	        processCell(x, y, filled, thresholds, delta);
	        p.translate(cellDim, 0);
	      }
	      p.pop();
	      p.translate(0, cellDim);
	    }
	    p.pop();
	  };

	  const display = () => {
	    setValues();
	    p.noLoop();

	    processGrid(0.3, 10, 0.7 / 10, [seaColor]);
	    processGrid(-1, 120, 1.3 / 120, []);
	  };

	  p.draw = () => {
	    p.clear();
	    p.scale(scale);

	    display();
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	const topography = (p5) => {
	  console.info('Topography by Kjetil Midtgarden Golid.');
	  console.info('Link to project: https://github.com/kgolid/p5ycho/tree/master/topography');

	  const p = p5;

	  const rings = 15;
	  const dimInit = 1;

	  const ox = p.random(10000);
	  const oy = p.random(10000);

	  const spacing = -10;
	  const magnitude = 75;
	  const noiseDelta = 15;
	  const noiseRadius = 0.25;

	  const coorX = p.randomGaussian(p.windowWidth / 2, 250);
	  const coorY = p.randomGaussian(p.windowHeight / 2, 250);

	  const cols = ['#996628', '#B28223', '#A68E2F', '#9A9A3B', '#769A76', '#6B828E'];


	  p.setup = () => {
	    const canvas = p.createCanvas(p.windowWidth, p.windowHeight);

	    canvas.parent('stage');
	    canvas.position(0, 0);
	    canvas.elt.style.position = 'fixed';
	    canvas.style('z-index', '-1');

	    p.background(0);
	    p.strokeWeight(1);
	    p.stroke(0);
	    p.noLoop();
	    p.smooth();
	  };

	  const getNoise = (radian, dim) => {
	    let r = radian % p.TAU;

	    if (r < 0.0) {
	      r += p.TAU;
	    }
	    return p.noise(
	      ox + p.cos(r) * (noiseRadius + dim / 200), oy + p.sin(r) * (noiseRadius + dim / 200), dim,
	    );
	  };

	  const createInitialArray = () => {
	    const array = [];
	    for (let i = 0; i < 360; i += 1) {
	      array.push(dimInit);
	    }
	    return array;
	  };

	  const display = () => {
	    let arr = createInitialArray();
	    for (let i = 0; i < rings; i += 1) {
	      p.strokeWeight(i % 6 === 0 ? 2 : 1);

	      p.fill(cols[p.floor((i / rings) * cols.length)]);

	      const newArr = [];

	      p.beginShape();
	      Object.keys(arr).forEach((ang) => {
	        const rad = p.radians(ang);
	        const newRadius = spacing + arr[ang] + getNoise(rad, i * noiseDelta) * magnitude;

	        p.vertex(newRadius * p.cos(rad), newRadius * p.sin(rad));
	        newArr[ang] = newRadius;
	      });
	      p.beginContour();
	      Object.keys(arr).forEach((ang) => {
	        const rad = p.radians(359 - ang);
	        p.vertex(arr[359 - ang] * p.cos(rad), arr[359 - ang] * p.sin(rad));
	      });
	      p.endContour();
	      p.endShape(p.CLOSE);

	      arr = newArr;
	    }
	  };

	  const displayCrosses = () => {
	    for (let i = 0; i < 50; i += 1) {
	      p.push();
	      p.translate(p.random(20, p.windowWidth - 20), p.random(20, p.windowHeight - 20));

	      p.line(-5, 0, 5, 0);
	      p.line(0, -5, 0, 5);
	      p.pop();
	    }
	  };

	  const displayGrid = () => {
	    p.stroke(0, 80);
	    p.strokeWeight(1);

	    const gridSpace = 160;

	    for (let i = gridSpace; i < p.windowHeight; i += gridSpace) {
	      p.line(0, i, p.windowWidth, i);
	    }

	    for (let j = gridSpace; j < p.windowWidth; j += gridSpace) {
	      p.line(j, 0, j, p.windowHeight);
	    }
	  };

	  p.draw = () => {
	    p.clear();
	    p.push();
	    p.translate(coorX, coorY);
	    p.scale((p.windowWidth + p.windowHeight) / 1500);

	    display();
	    p.pop();
	    displayCrosses();
	    displayGrid();
	  };

	  const resizeCanvas = () => {
	    p.resizeCanvas(p.windowWidth, p.windowHeight);
	    p.redraw();
	  };

	  const debounceResize = lodash_debounce(resizeCanvas, 100);

	  p.windowResized = () => {
	    debounceResize();
	  };
	};

	console.info(`Welcome! Thanks for visiting my site. 
Refresh page to see other generative backgrounds :)!

The generative backgrounds are written in P5.js.
Some of these are inspired by/taken from other artists.

If you have any questions please let me know at: bilgiliozenc@gmail.com
`);


	const main = document.querySelector('#main');

	const resizeWindow = () => {
	  const vh = window.innerHeight * 0.01;
	  document.documentElement.style.setProperty('--vh', `${vh}px`);
	};

	const scrollEvent = () => {
	  const stage = document.querySelector('#stage');
	  const arrow = document.querySelector('#arrow');

	  if (main.scrollTop > window.innerHeight / 2) {
	    document.documentElement.style.setProperty('--bg-color', '#efefef');
	    document.documentElement.style.setProperty('--primary-color', '#171718');
	    stage.classList.add('invisible');
	  } else {
	    document.documentElement.style.setProperty('--bg-color', '#171718');
	    document.documentElement.style.setProperty('--primary-color', '#e4e0d7');
	    stage.classList.remove('invisible');
	  }

	  if (main.scrollTop > 50) {
	    arrow.classList.add('invisible');
	  } else {
	    arrow.classList.remove('invisible');
	  }

	  resizeWindow();
	};

	const initialize = () => {
	  resizeWindow();

	  document.querySelector('#intro').scrollIntoView();

	  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
	    anchor.addEventListener('click', (e) => {
	      e.preventDefault();
	      e.target.scrollIntoView({
	        behavior: 'smooth',
	      });
	    });
	  });

	  const sketches = [
	    crossGrid, cubeGrid, donut, lorenz,
	    globe, rings, terrain, topography,
	  ];

	  const randomNumGenerator = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);

	  const sketch = sketches[randomNumGenerator(0, sketches.length - 1)];
	  new p5(sketch);
	};

	window.addEventListener('load', initialize);

	const debounceScroll = lodash_debounce(scrollEvent, 25);
	main.addEventListener('scroll', debounceScroll);

	const debounceResize = lodash_debounce(resizeWindow, 25);
	window.addEventListener('resize', debounceResize);

}));
